!1 3. log4j logging
#
There are three aspects to logging with log4j when using ''!-FitLibrary-!''.

 * The first section is only relevant to you if you're currently using log4j for logging in your application.
 * The following sections apply whether you're currently using log4j or not.

We assume familiarity with log4j. See ... for a good introduction.

If you use another logging system, and would like to be able to hook it into ''show after'' as in 3.1 below:

 * Contact me and I can add a plugin mechanism to allow it. Rick Mugridge (rick at rimuresearch.com).
#
----!2 3.1 Appending log4j output after tables
#
If you're having trouble working out what's going on (or wrong) in a storytest and/or your code, you may find it convenient to have your log4j logs appended after !-FitLibrary-! tables.

To start this, add the following action to the top of your storytest (''false'' stops it):

|''configure log4j''|
|''show after''|true|

This adds a special log4j ''Appender'' that will display log information in the report. (See the log4j docs for details of ''Appender''s if you're interested.)

 * This will not affect other appenders that you use in your application, such as writing to a log file.
 * You configure logging to be enabled in log4j in the usual manner in order for logs to appear.

When ''!-FitLibrary-!'' runs a storytest with ''show after'' turned on for log4j.

 * All the logging information that arrives while a table is executing will be appended to that table.
 * The logging is thread-safe, so it will handle logging from several threads at once.
 * Any logging that occurs after the storytest finished will not be shown in the report.

Log4j levels can also be controller with the following actions, for example:

|''configure log4j''|
|''level''|DEBUG|''for''|''com.corp.us.app.pck''|

or, for all:

|''configure log4j''|
|''level''|TRACE|

Note that this is a global setting; it's not specific to a storytest and so will affect subsequent storytests in a suite. It's assumed that it will normally be used with a single storytest while investigating its behaviour.

With careful use of packages (or other log4j ''names''), you can easily tailor the logs that are collected and thus shown after tables.

See [[this page for an example][^ExampleLog4j]]
#
----!2 3.2 Using log4j in your fixture
#
If you don't use log4j in your application code, you can still use it in your fixture code.

The actions above apply.

See [[this page for an example][^FixtureExampleLog4j]]
#
----!2 3.3 Logging of ''!-FitLibrary-!'' itself
#
''!-FitLibrary-!'' uses log4j for logging as well. However, it uses a separate "name space" so that its logging does not affect normal uses of log4j.

You may like to turn on the logging in ''!-FitLibrary-!'' so you can see what it's doing. For example:

|''!-configure FitLibraryLogging-!''|
|''show after''|true|

You can also request that the logging from ''!-FitLibrary-!'' is also routed to the standard log4j, so that you can include the ''!-FitLibrary-!'' logs in your usual log files, etc.

|''!-configure FitLibraryLogging-!''|
|''append to log4j''|true|

See [[this page for an example][^FitLibraryLog4j]]

There is also specialised logging for some of the fixtures in ''!-FitLibraryWeb-!'', such as for ''web services''. Again, this logging, using ''!-FixturingLogging-!'', is kept separate from standard log4j logging. This is configured as follows:

|''!-configure FixturingLogging-!''|
|''show after''|true|
|''append to log4j''|true|
#
!1 The End
#
That's the end of this tutorial on logging.