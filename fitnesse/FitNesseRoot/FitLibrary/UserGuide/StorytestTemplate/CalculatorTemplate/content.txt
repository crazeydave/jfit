!**< defs
!define st (
!|fitlibrary.eg.Calculator|

|''total''|INITIAL|
----
|+|ADD|
----
|''total''|TOTAL|
)
*!
A template is a storytest with specific values remaining to be filled in (ie, a little like a written or web form with information to be filled in). This means that the template can be used lots of times, as we'll see.

!|fitlibrary.DoFixture|
----
The following table makes use of the template that's defined in the last table. The following table consists of several rows:
 * The first row specifies the name of the template to use. The named template must be defined in a later table in the page.
 * The second row gives the names of the arguments to be applied. These names will usually correspond to the parameter names given in the template definition, but don't need to. However, the corresponding order is important, as we'll see.
 * The third row, and those that follow, are values that are plugged into the named template. For each row, the following happens:
  * Each of the values from the row are in turn substituted into the body of the template.
  * The storytest in the template is tested with those values.
  * If the storytest passes, that value row is marked green
  * If the storytest fails to pass, the row is marked red, etc and a comment table is inerted in the report to show what went wrong in the storytest (run this to see this happen)
For an example of value substitution, for the last row of the following table:
   * The value "2" is substituted for the "INITIAL" value in the body of the template
   * The value "3" is substituted for the "ADD" value, and etc.
|''use template''|calculator|
|INITIAL|ADD|TOTAL|
|0|0|0|
|-1|1|0|
|1|2|4|
|2|3|pear|

The following table defines a template. It consists of three rows:
 * The first row defines the name of the template
 * The second row defines the names of the parameters
 * The third row contains a single cell that contains the tables of a storytest (see ^ActionAsParameter to see how to include the storytest from a separate page in ''!-FitNesse-!'')
|''template''|calculator|
|INITIAL|ADD|TOTAL|
|${st}|

Note:
 * Any ''!-DoFixture-!'' class or subclass will do for the overall storytest, as the template use depends on the fixture/etc defined in the template itself.
 * The template definition table has to follow tables that use the template
 * A parameter may be used several times in the ''body'' of the included storytest
 * The case (upper or lower) is significant in matching parameter names
 * It will cause confusion if the order of the parameters in the use of the template is changed so that they no longer match the order in the template definition
!3 Next
Here's another example, in which the action name is also treated as a parameter:
 * ^ActionAsParameter
----The following specifies the expected counts of passes, fails, etc for the page. This is used here to avoid manually checking, as here the storytests are written to fail. You'll most probably not use this technique, as you'd expect all your storytests to pass. It's possible to specify that certain failures are expected (see .FitLibrary.UserGuide.FitLibraryByExample.WorkFlow.WhenActionsFail).
|''expected test results''|2|''right''|2|''wrong''|0|''ignored''|2|''exceptions''|
