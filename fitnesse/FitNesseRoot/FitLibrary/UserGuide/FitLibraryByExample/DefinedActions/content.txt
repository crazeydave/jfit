!1 DefinedActions
DefinedActions allow high-level actions to be defined in terms of lower-level actions. For example, business-level actions can be mapped into automatic actions carried out through a web browser, through web services, etc.

These can be applied with any flow storytests and any fixtures.
!2 1. ''Defined actions'' for shared use across a suite
''Defined actions'' can be specified so that they are processed once for a suite. Eg, within the ''!-SuiteSetUp-!'' page, include one or more tables that reference where ''defined actions'' are to be found:

!|MySuiteFixture|

|''define actions at''|!-.MyApp.ActionDefinitions-!|

The page name provided as the argument to the action above must be a complete and valid path, starting with ".".

The defined actions in ''!-.MyApp.ActionDefinitions-!'', and its child pages, can then used in that suite.

The page structure could look like this, with the defined actions organised by function:
{{{
MyApp
 * ActionDefinitions
   * DiscountVouchers
     * EnterVoucher
   * SaleConfirmation
   * CreateOrder
     * MultilineOrder
   etc
}}}
In each of those pages, there can be zero or more defined actions specified. For example, the following specifies two defined actions (''loginWith'' and ''getUrlGivingTitle'') shown in wiki syntax:
{{{
|''login''|USER|''with''|PASSWORD|

|''with''|//input[@id="userName"]|''enter text''|USER|

|''with''|//input[@id="password"]|''enter text''|PASSWORD|

|''submit''|//form|
----
|''get url''|URL|''giving title''|TITLE|

|''get url''|URL|

|''title''|'''becomes'''|TITLE|
----
}}}The first row specifies the name and arguments of the ''defined action'', following the usual form of ''!-DoFixture-!'' actions. The even cells contain the parameter names (eg, ''URL'' and ''TITLE''). They are in uppercase here, but that's not necessary.

The subsequent tables (up to the !- ---- -! or the end of the page) give the ''body'' of the ''defined action'', and can include use of the parameters at any point. The example above uses the parameters by themselves in various cells. In general, the parameters can be included with other text. The following tables make up the body of the ''defined action''.

!2 2. Using a Defined Action
When a defined action is used ("''called''") in a storytest, the ''body'' of the defined action is run after parameter substitution. Consider the following action:

|''get url''|http://localhost:8080|''giving title''|!-FrontPage-!|

This matches the ''defined action'' given above. So the parameter URL takes the value "!-http://localhost:8080-!" and the parameter TITLE takes the value "!-FrontPage-!". These are substituted into the body, to give the following:

|''get url''|http://localhost:8080|

|''title''|'''becomes'''|!-FrontPage-!|

This is then run in the usual way. If further defined actions are used within the body, these are treated in the same way.

If the use of a ''defined action'' passes, the original use is coloured green. Otherwise, it's coloured red or yellow, and the full details of what failed are shown in the report.

By including the following table in a storytest, the subsequent uses of ''defined actions'' within the storytest will be expanded even when they pass:

|''set expand defined actions''|true|

!2 3. Class-Based Defined Actions
See ^ClassBasedDefinedActions
----
!2 Appendix A. Defining an Action Within a Storytest
An action definition can be included within a storytest, but it's messier than with suites (as above). Here's an example:

!**< hide
!define getUrlGiving (
|''get url''|URL|''giving title''|TITLE|

|''get url''|URL|

|''title''|'''becomes'''|TITLE|
)

**!
|!-fitlibrary.DefineAction-!|
|${getUrlGiving}|

The first row of the table has the fixture ''!-fitlibrary.DefineAction-!''. The second row of the table contains several nested tables. The first of these tables gives the defined action, with the even cells containing parameter names (here, ''URL'' and ''TITLE''). They are in uppercase here, but that's not necessary.

The subsequent (nested) tables give the ''body'' of the ''defined action'', and can include use of the parameters at any point. The example above uses the parameters by themselves in various cells. In general, the parameters can be included with other text.
!3 A.1 Wiki Format for ''defined actions'' Within a Storytest
Here it is shown in wiki format:

----{{{
!**< hide
!define getUrlGiving (
|''get url''|URL|''giving title''|TITLE|

|''get url''|URL|

|''title''|'''becomes'''|TITLE|
)

**!
|!-fitlibrary.DefineTemplate-!|
|!-${getUrlGiving}-!|
}}}----
This, unfortunately, uses lots of messy wiki hieroglyphics!

Let's go through them, step by step.

!3 A.2 Hiding text by folding
The text surrounded by the following is folded up and hidden:
----{{{
!**< hide
...

**!
}}}----
If you want to be able to see the text inside the folded area, replace the "<" by a ">". Then, when not editing the text, you can fold/unfold the text, etc inside that folding area by clicking on the little triangle.

!3 A.3 Defining nested tables
Nested tables can't be written directly in place. They need to be ''defined'' and used as we see above.

A definition has a name and a value (inside brackets). The value may be on a single line, such as:
----{{{
!define date (20 Dec 2009)
}}}----
Or it may be over several lines, such as:
----{{{
!define getUrlGiving (
|''get url''|URL|''giving title''|TITLE|

|''get url''|URL|

|''title''|'''becomes'''|TITLE|
)
}}}----
''!-FitNesse-!'' is fussy about the format of the ''define'':
 * "!define" has to be at the start of the line, without a space in the middle.
 * The name of the define can't have spaces in it. I suggest just using letters and digits.
 * There has to be one space after the name and before the first bracket
 * There can't be a ")" inside the value of the define.
If you need to include a ")" inside the value, uses "{" and "}" instead to delimit the value. Then you can't use "}" inside the value. If you need to use both ")" and "}" you have to break the text up with several !defines so that any define has either one or the other, but not both.

A defined value is used as follows: !-${getUrlGiving}-!. In our example above, we use that to include the nested tables inside the second row of the ''define action'' table.
