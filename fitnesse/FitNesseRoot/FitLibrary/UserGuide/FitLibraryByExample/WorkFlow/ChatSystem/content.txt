!**< defs
${pleaseIgnore}
!define anna (
|''name''|
|anna|
)
!define roomsIn (
|''name''|''owner''|''users''|
|wow|anna|${anna}|
|pirates|anna||
)
!define users (
|''name''|
|anna|
|sarah|
)
!define rooms (
|''name''|''owner''|''users''|
|wow|anna|${users}|
|pirates|anna||
)
**!
!3 Introduction
Let's look at several storytests for a simple chat room system. This will introduce further ideas about workflow storytests.

!3 Contents
Storytests:
 * ChatSystem
 * WhenActionsFail
 * WorkflowSummary
Code details:
 * WorkflowCode
 * GeneralCodeDetails
 * SetUpTearDown
!3 Chat
A chat system consists of several named Users and several named Rooms. A Room may contain Users.

As we saw in the calculator example, there are three main phases to ${workflow}: ${setup}, ${actions}, and ${checks}. The three phases are separated by horizontal lines below.

In the ${setup}, there are two users and two rooms. There one user in the first room. In the ${checks}, the second user is now also in the first room.

You can run this:
---- * ${setup}
| !-fitlibrary.eg.chat.ChatSystem-! |

|''users''|${users}|
|''rooms''|${roomsIn}|
---- * ${actions}
|''user''|sarah|''enters''|wow|''room''|
---- * ${checks}
|''users''|${users}|
|''rooms''|${rooms}|
----
The six tables in this storytest specify the following sequence:
 * Start the chat server and start the ${setup} of the ${workflow}
 * Specify the current (${given}) Rooms and Users
  * In general, there may be several rooms (and Users) listed. As there may be several, they are listed downwards
  * Rooms and users have names
  * There may be several Users in a room; there are none initially
 * Signal the start of the ${actions} of the ${workflow}
 * Specify a single ${action}: User "Sarah" enters the "pirates" Room
  * The first, third and fifth cells ("user", "enters", "room") contain ${keywords}, which give information about the role of the data that's in the second and fourth cells ("sarah" and "pirates")
  * ${keywords} are usually shown in ''italics'' and are often colored when the test is run (try it now).
 * Signal the start of the ${checks} phase of the ${workflow}
 * Specify the ${expected} rooms and users after the action

The last, '''Checks''' table is checking the list of rooms that result, listed downwards (here there's only one), along with the list of users in the rooms (also listed downwards).

For help with editing nested tables with ${fitNesse}, see .FitLibrary.UserGuide.EditingNestedTablesInFitNesse
!3 Next Step...
Let's now look at how to specify what happens when an action is not permitted: ''WhenActionsFail''.


