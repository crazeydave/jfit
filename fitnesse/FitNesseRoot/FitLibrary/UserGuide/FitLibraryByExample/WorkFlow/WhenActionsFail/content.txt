Let's look at what happens when an action fails. Sometimes we expect an action to fail because it's not valid because of the arguments or because of the state of the system. Eg, we want to specify that a user can't enter a room that doesn't exist.

However, we want all the storytests to pass. Otherwise, we'd have to manually check that only the right ones failed. So there's a way to specify that an action should be rejected.

Let's start by looking at a failing action in ''Chat'' (run the test to see what happens):

!**< defs
${pleaseIgnore}
!define roomsIn (|''name''|''owner''|''users''|
|pirates|sarah||
)
!define users (|''name''|
|sarah|
)
!define rooms (|''name''|''owner''|''users''|
|pirates|sarah|${users}|
)
**!
 * ${setup}
| !-fitlibrary.eg.chat.ChatSystem-! |

|''users''|${users}|
|''rooms''|${roomsIn}|
---- * ${actions}
We specify that an action is to be rejected (a ''sad path''), with the special action '''reject''' in the first cell:

|'''reject'''|''user''|sarah|''enters''|lotr|''room''|
---- * ${checks}
No new rooms have been created:

|''users''|${users}|
|''rooms''|${roomsIn}|
----
Here's a ''WorkflowSummary''.

