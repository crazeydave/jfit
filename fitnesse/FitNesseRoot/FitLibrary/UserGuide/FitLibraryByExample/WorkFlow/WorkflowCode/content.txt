!3 Actions and Methods
Each action in a workflow table is mapped directly to a method in an object.
!**< defs
${pleaseIgnore}
!define roomsIn (|''name''|''owner''|''users''|
|pirates|sarah||
)
!define users (|''name''|
|sarah|
)
!define rooms (|''name''|''owner''|''users''|
|pirates|sarah|${users}|
)
**!
---- * ${setup}
 * The first table refers to a class
  * An object of that class, ''!-fitlibrary.eg.chat.ChatSystem-!'' is created
  * As it's not a fixture or ${traverse}, it's wrapped automatically by a workflow object, which interprets the rest of the tables in the storytest
  * As it is a ${domainAdapter}, it provides a reference to a ${sut}, as we see in the code below
| !-fitlibrary.eg.chat.ChatSystem-! |
 * The first row of the following table results in calls to the methods:
  * the ${objectFactoryMethod} ''name()'' in ''!-ChatSystem-!'' to create a User for each row of the nested table of Users. In general, this method name is derived from concatenating all of the labels and converting into a valid identifier using ${extendedCamelCase}.
  * the ${setter} ''setUsers()'' in ''Chat'' with a list of all of the Users (one here)
 * The second row of the following table results in calls to the methods:
  * the ${objectFactoryMethod} ''nameUsers()'' in ''!-ChatSystem-!'' to create a Room for each row of the nested table of Rooms
  * the ${setter} ''setRooms()'' in ''Chat'' with a list of all of the Rooms (one here)
|''users''|${users}|
|''rooms''|${roomsIn}|
---- * ${actions}
 *  The following table results in calls to the methods:
  * the ${finder} ''findUser()'' in ''!-ChatSystem-!'' to lookup a User by name
  * the ${finder} ''findRoom()'' in ''!-ChatSystem-!'' to lookup a Room by name
  * ''userEntersRoom()'' in ''Chat'', passing to it the User and Room arguments that were returned by the ${finder}s
|''user''|sarah|''enters''|pirates|''room''|
---- * ${checks}
 * The final table checks the list of users and rooms. It does this by calling the ${getter} for the properties ''users'' and ''rooms'' and compares the actual lists against the ''expected'' lists

|''users''|${users}|
|''rooms''|${rooms}|

!3 The ''!-ChatSystem-!'' Code
 * Sometimes it's necessary to use actions in workflow storytests that don't correspond directly to methods in the underlying domain object (eg, ''Chat''). Rather than polluting our domain object with testing methods, we can use a ${domainAdapter}.
 * In general, a ${domainAdapter} can "override' methods in the domain object. Eg, the adapter method may provide extra data, catch exceptions, and etc.
 * A ${domainAdapter} sits between ${fitLibrary} and the domain object. Consider when a workflow action is mapped into a method name. If this method appears in the ${domainAdapter}, that method is called. Otherwise, the method in the underlying domain object is called.
 * The ''!-ChatSystem-!'' class acts as a ${domainAdapter} for the ''Chat'' system, providing the ${objectFactoryMethod}s and ${finder}s.
 * ''!-ChatSystem-!'' implements ''!-DomainAdapter-!'', which requires that the method ''getSystemUnderTest()'' is provided. Here, this method returns the ''Chat'' domain object.
----{{{  public class ChatSystem implements DomainAdapter {
	private Chat chat = new Chat();

	public Object getSystemUnderTest() {
		return chat;
	}
	public User name(String name) {
		return new User(name);
	}
	public Room nameUsers(String name, List users) {
		Room room = new Room(name);
		room.setUsers(users);
		return room;
	}
	public User findUser(String userName) {
		User user = chat.getUser(userName);
		if (user == null)
			throw new RuntimeException("Unknown user: "+userName);
		return user;
	}
	public Room findRoom(String roomName) {
		Room room = chat.getRoom(roomName);
		if (room == null)
			throw new RuntimeException("Unknown room: "+roomName);
		return room;
	}
  } }}}----
!3 The ''Chat'' Code
----{{{ public class Chat {
	private List users = new ArrayList();
	private List rooms = new ArrayList();
	private Map roomsMap = new HashMap();
	private Map usersMap = new HashMap();

	public List getUsers() {
		return users;
	}
	public void setUsers(List users) {
		for (Iterator it = users.iterator(); it.hasNext(); )
			addUser((User)it.next());
	}
	public List getRooms() {
		return rooms;
	}
	public void setRooms(List rooms) {
		for (Iterator it = rooms.iterator(); it.hasNext(); ) {
			addRoom((Room) it.next());
		}
	}
	public User getUser(String userName) {
		return (User)usersMap.get(userName);
	}
	public Room getRoom(String roomName) {
		return (Room)roomsMap.get(roomName);
	}
	public boolean userEntersRoom(User user, Room room) {
		room.addUser(user);
		return true;
	}
	private void addUser(User user) {
		if (usersMap.get(user.getName()) != null)
			throw new FitLibraryException("User already exists");
		users.add(user);
		usersMap.put(user.getName(),user);
	}
	private void addRoom(Room room) {
		if (roomsMap.get(room.getName()) != null)
			throw new FitLibraryException("Room already exists");
		rooms.add(room);
		roomsMap.put(room.getName(),room);
	}
  } }}}----

Let's now look at GeneralCodeDetails.


