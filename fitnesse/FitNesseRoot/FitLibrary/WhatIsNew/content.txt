!1 February 2010 Version
#
#
!2 Additions
#
!3 Fit included
#
 * Fit is now included in the !-FitLibrary-! download.
 * Fit will continue to run under !-FitNesse-! but !-FitNesse-! will no longer come with the Fit framework code included.
 * Fit variables can be accessed from !-FitLibrary-! - see below.
#
!3 !-DoFixture-! and Sequence-style actions
#
 * !-DoFixture-! first tries to find a method that matches an action in keyword style (inter-leaved keywords and arguments)
 * Only if there is no match, it then tries to find a method in sequence style (the first cell contains the name of the method and subsequent cells contain the arguments)
 * This works with all the infix special actions ('''is''', '''matches''', etc)
 * This works with the following prefix special actions: '''check''', '''not''', '''reject''', '''show''', '''show after''', '''show escaped''', '''set''', '''set symbol named''', '''log'''
 * This makes it particularly easy to access ordinary methods within a SUT without having to write adapter methods in keyword style.
#
!3 New special action in !-DoFixture-!
#
 * The action 'not true' is like 'not', except that it gives an error if an exception has been thrown. For example:

|'''not true'''|''some action''|1|''on''|2|
#
!3 Auto-wrapping of bare objects with !-DoFixture-!
#
 * If the first table in a storytest creates an object that's not a fixture, it will be auto-wrapped with !-DoFixture-!
 * This means that it's not necessary to subclass fixtures for usual development
 * Bare objects used to be auto-wrapped by !-DomainFixture-!. If that behaviour is still required, include the following in a WasSuiteSetUp page:

!|fitlibrary.Configuration|

|auto wrap pojo with !-DoFixture-!|
#
!3 Loading defined actions
#
 * An action has been added to allow defined actions to be loaded quickly when the !-FitNesseRoot-! directory is not in the usual place.
 * The extra argument is a relative or absolute location for the !-FitNesseRoot-! directory
 * See .FitLibrary.SpecifiCations.DefinedActions.DefinedWithRootLocation
 * For example:

|''define actions at''|.FitLibrary.SpecifiCations.DefinedActions.OneDefinedAction|''from''|!-../whereIkeepFitNesse/FitNesseRoot-!|
#
!3 Link to defining page for defined action
#
 * Consider when a defined action is called in a storytest
 * If there is an error in the defined action body, or if the body is to be expanded regardless, this is shown in an added cell.
 * This has been changed so that a link is included back to the page in which the defined action was given.
 * For example, see .FitLibrary.SpecifiCations.DefinedActions.DefinedElsewhereExpanded
#
!3 Using Fit variables in !-FitLibrary-!
#
 * From !-FitLibrary-!, it is now possible set change and access Fit variables.
 * See .FitLibrary.SpecifiCations.DynamicVariables.SpecifyConvertFromToFitSymbols
#
!3 Bug fixes
#
 * !-DebugPage-!, a Java class that's handy for running a storytest from within a debugger, works again with !-FitNesse-!. It failed because of changes to the !-FitNesse-! code.
 * All subclasses of class ''Number'' are now treated as primitive types and are not ${autoWrapped} by !-DoFixture-!.
 * Checks are now made for blank parameters and for duplicated parameters in the definition of a defined action. See .FitLibrary.SpecifiCations.DefinedActions.BlankParameter and .FitLibrary.SpecifiCations.DefinedActions.DuplicatedParameter
#
!3 Removed
#
 * Obscure Functionality: It's no longer possible to have !-DoFixture-! fake the results it expects. This was added to record Selenium results several years ago, but was not effective. However, it's possible to record with dynamic variables.
 * Templates have been removed, as they are now superceded by multi-defined actions.  See .FitLibrary.SpecifiCations.DefinedActionsWithNamedParameters
#
#
!1 October 2009 Version
#
''!-FitLibrary-!'' now depends on Java 6.
#
!3 ''!-DoFixture-!''
#
 * Added infix special actions '''contains''', '''eventually contains''', '''does not contain''', '''optionally'''. See .FitLibrary.SpecifiCations.DoWorkflow.SpecialActions.TestContains and .FitLibrary.SpecifiCations.DoWorkflow.SpecialActions.TestNotContains and .FitLibrary.SpecifiCations.DoWorkflow.SpecialActions.TestOptionally, .FitLibrary.SpecifiCations.DoWorkflow.SpecialActions.TestEventuallyContains

 * Added relationals, <, <=, >, >=, =. See .FitLibrary.SpecifiCations.DoWorkflow.SpecialActions.TestRelationals

 * Added a ''stop watch'' and ''sleep for'': See .FitLibrary.SpecifiCations.DoWorkflow.TestStopWatch

 * When longer strings don't match with '''is''', etc, a diff is shown. See .FitLibrary.SpecifiCations.DoWorkflow.SpecialActions.TestIs, .FitLibrary.SpecifiCations.DoWorkflow.SpecialActions.TestIsDiffWithBlanks.

 * A new action uses pattern matching to extract pieces of text out of a string. See .FitLibrary.SpecifiCations.DoWorkflow.TestHarvestFromText

 * Fixed auto-wrapping so that it doesn't auto-wrap Boolean, Number, Character

 * Added some support for plain text for single-table actions. This is still experimental, somewhat incomplete, and may change. This is not supported within defined actions. See .FitLibrary.SpecifiCations.PlainTextInsteadOfTables

 * To produce a cross reference of all calls to actions and defined actions, see .FitLibrary.CrossReference. This is not precise, as it cannot easily tell which are data rows in tables.
#
!3 Defined Actions
#
 * Sped up loading defined actions by reading them directly from the file system.  This does mean that !-FitNesse-! features such as !-FitNesse-! variables and includes are not available. For backwards compatibility, a variation is available that uses the slow way.... Now defined action name lookup is case sensitive, while previously it was not.

 * Changed the way that defined action calls are shown in the report.

 * Partially implemented a multi-defined action. This may change. More details later... See .FitLibrary.SpecifiCations.DefinedActionsWithNamedParameters
#
!3 ''!-SuiteFixture-!''
 * Fixed a problem with ''!-SuiteFixture-!'' so that it now passes a copy of its dynamic variables to the fixture in each storytest.

 * Allow for ''set stop on error'' to be set at the SuiteFixture level.
#
!3 ''!-SelectFixture-!''
 * Can now add to the SUT set a fixture that is returned from an action. See .FitLibrary.SpecifiCations.SelectFixture.AddingFixtureFromAnAction

 * Note that the behaviour of ''!-SelectFixture-!'' is soon going to be built into the fundamental flow mechanism.
#
!3 New fixtures
#
 * Added specialised Map fixtures. See .FitLibrary.SpecifiCations.FitLibraryGeneric.GenericMaps.GenericSubsetMap and .FitLibrary.SpecifiCations.FitLibraryGeneric.GenericMaps.ListOfMaps

 * Randomly generating dynamic variables:

|''select''|colour|''randomly''|
|<green>|
|re@{D}|
|yellow|
|$white|

This binds the dynamic variable ''colour'' to one of four possibilities, selected randomly. See .FitLibrary.SpecifiCations.DynamicVariables.RandomSelection
#
!3 Implementation Changes
#
 * Some of the built-in mechanism of ''!-FitLibrary-!'' are now pluggable. Eg, you can alter the way that methods are looked up or the way that stack dumps for exceptions are shown in the report. See class ''!-fitlibrary.global.PlugBoard-!'', which requires that alternative objects are thread safe.

 * I've also started to get ready to make more parts pluggable: See ''!-fitlibrary.global.TemporaryPlugBoardForRuntime-!'' for the first step.

 * In a later release, I am planning to integrate a ''!-ColumnFixture-!'' look-alike into ''!-FitLibrary-!'' and then remove all dependency on ''Fit'' code.
#
----!1 July 2009 Version
!2 1. Logging into the report
 * A storytest table (or a fixture) may log text that is added in a folding area after the table concerned. See .FitLibrary.SpecifiCations.DoWorkflow.SpecialActions.TestShowAfter
#

!2 1. ''Dynamic Variables'' in Fit tables
 * If a Fit table is used within a flow storytest (ie, started with ''!-DoFixture-!''), any ''dynamic variables'' in that table are substituted before Fit is called. This allows ''dynamic variables'' that have been set within ''!-FitLibrary-!'' to be used in Fit tables. See .FitLibrary.SpecifiCations.AlienEvaluator.DynamicVariablesSubstitutedForFit
 * Changes to the dynamic variables (and timeout values) in one ''!-DoFixture-!'' will be seen in other ''!-DoFixtures-!'' that are being managed by a ''!-SelectFixture-!''.
 * Dynamic variables can be updated from a unicode-based property file.
!2 2. New Special Actions
 * ''is not'' (see .FitLibrary.SpecifiCations.DoWorkflow.SpecialActions.TestIsNot)
 * ''does not match'' (see .FitLibrary.SpecifiCations.DoWorkflow.SpecialActions.TestDoesNotMatch)
!2 3. Logging
 * Logging capability has been added. See ...
----!1 January 2009 Version
!2 1. Changes to ''Defined Actions''
 * There is now a much more convenient way of specifying ''defined actions'' that are to be used in a suite.
 * Any ''show''s in a ''defined action'' body are now displayed at the outer-most point of call of the ''defined action''.
 * An object-oriented form of ''defined actions'' is provided
 * It's no longer necessary to make explicit use of '''oo''' special actions
 * A wiki class can be used in an '''oo'' special action as well as a wiki object
See .FitLibrary.UserGuide.FitLibraryByExample.DefinedActions
!2 2. Changes to Dynamic Variables
 * Dynamic properties can now hold arbitrary objects as values, not just Strings
 * A dynamic variable can be set to the value of an action. Eg:
|'''set'''|id|''some action of''|person|
 * Dynamic properties are still rather experimental and very likely subject to further (non-backwards compatible) change. In particular, their "object nature" will be explored much further (in a cross-over with ''defined actions'').
See .FitLibrary.UserGuide.FitLibraryByExample.DynamicVariables
!2 3. ''New Instance'' Plugin Support
 * Where a value of an interface or abstract class is needed, it's possible to specify the details of the concrete class to be constructed. But this is specific to a particular interface or class. It would be handy to define a general object creation mechanism. For example, this is needed for creating objects corresponding to xml with xmlBeans.
 * It's now possible to define a "plugin" method in a fixture or domain adapter, a ''newInstancePlugin()''. This takes a class as argument and is expect to return a new instance of that class (or to return null if it doesn't handle the class provided).
See .FitLibrary.SpecifiCations.PlugInMethods.ObjectCreationPlugin.SpecifyCall and the corresponding class, ''!-HasNewInstancePlugin-!''.
!2 4. Super Parse Delegation
''!-FitLibrary-!'' has a general ''parse delegate'' mechanism, which specifies a class or object that's used to parse an object of a particular type. However:
 * It is only applied to a class that is exactly the specified type
 * It does not provide a mechanism to handle object comparison or showing the value of an object.
''!-FitLibrary-!'' fixtures (and traverses) now have a method to register a ''parse delegate'' that applies to a type and any subtype of that type. That method is ''registerSuperParseDelegate()''.
 * See .FitLibrary.SpecifiCations.ParserSpecifications.ValueObjectParser.TextInCell.DelegateParseString.SpecifySuperParseDelegate for an example of the use of this, and the corresponding class ''!-ParseMyFixedPointAsStringWithSuperDelegate-!''.
The delegate has the following methods (with only the first one being mandatory):
 * ''parse()'' to convert a String to an object of the given type. This could be used, for example, when you want to parse an object of some class that you're unable to change, such as a ''Date''.
 * ''matches()'' to check whether two objects of the given type are equal. This could be used, for example, if you don't want to rely on the normal ''equals()'' method of the object concerned, such as to ignore some properties.
 * ''show()'' to display an object of the given type, such as in a ''show'' special action or in an error message. This could be used, for example, to display a terse or otherwise specialised form of an object when that's sufficient.
Super parse delegates are only applied if there is no ordinary parse delegate that applies.

Super parse delegates are applied in pseudo-random order. If two or more super parse delegates my apply to a particular type, either one may be chosen, as determined at runtime.
 * If this proves to be a problem, let me know and I will change the system in future to check for ambiguity so as to avoid the random choice. This would have a performance implication  if there were lots of them.
See .FitLibrary.SpecifiCations.ParserSpecifications.ValueObjectParser.TextInCell.SpecifySuperParseDelegate
!2 5. ''!-PropertyEditors-!'' used for parsing
If a ''!-PropertyEditor-!'' exists for a given class, that's used by ''!-FitLibrary-!'' to
 * parse text in table cells to create an object of that class (using the ''!-PropertyEditor-!'' method ''setAsText()'')
 * show an object of that class in a report (using the ''!-PropertyEditor-!'' method ''getAsText()'').
For a class ''!-a.b.MyClass-!'', it will look for a class ''!-a.b.MyClassEditor-!'' that ''implements !-PropertyEditor-!'' to use for this, as is usual with Java ''!-PropertyEditors-!''.

Such ''!-PropertyEditors-!'' are used for handling primitive and built-in types like, '''char''' and '''Boolean'''.

See .FitLibrary.SpecifiCations.ParserSpecifications.ValueObjectParser.TextInCell.HasPropertyEditor
!2 6. Show
 * The ''show'' special action now colours the added cell blue
 * A method called from a ''!-DoFixture-!'' action can throw a ''!-FitLibraryShowException-!'', which contains some text (can be html). That text is inserted in an extra cell that's added to the row. This allows for extra information to be provided when things go wrong (or for debugging). See .FitLibrary.SpecifiCations.DoWorkflow.ShowExceptionHandling
!2 7. Recording with Dynamic Variables
Where a storytest makes use of ''dynamic variables'', it can be used to record, in a limited way, variations of data.

See .FitLibrary.SpecifiCations.DynamicVariables.RecordPropertyFile
----
!2 ^NovemberRelease
