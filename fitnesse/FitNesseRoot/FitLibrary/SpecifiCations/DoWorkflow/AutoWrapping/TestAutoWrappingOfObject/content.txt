 * If a workflow action returns an object, it's wrapped in a new ''!-WorkflowTraverse-!'', so that the object  can be tested in the rest of the table.
 * However, this doesn't apply if the object is any of the following: a Fixture, a Traverse, an array, a Collection, a primitive value or a Value Object.
|!-fitlibrary.spec.SpecifyFixture-!|
|!-<table border><tr><td>fitlibrary.specify.DoFixtureFlowUnderTest</td></tr>
</table>
<table border>
<tr><td>appends</td></tr>
<tr><td>plus</td></tr>
<tr><td>plus</td></tr>

</table>
<table border>
<tr><td>another object</td></tr>
<tr><td>plus</td></tr>
<tr><td>access other</td></tr>
</table>
The static methods can also be called:
<table border>
<tr><td>an Integer</td></tr>
<tr><td>check</td><td>parse int</td><td>3</td><td>3</td></tr>
<tr><td>check</td><td>double value</td><td>
23.0</td></tr>
</table>-!|!-<table border><tr><td>fitlibrary.specify.DoFixtureFlowUnderTest</td></tr>
</table>
<table border>
<tr><td>appends</td></tr>
<tr><td>plus</td></tr>
<tr><td>plus</td></tr>

</table>
<table border>
<tr><td>another object</td></tr>
<tr><td class="error">plus<hr/> <span class="fit_label">Missing method</span></td></tr>
<tr><td class="pass">access other</td></tr>
</table>
The static methods can also be called:
<table border>
<tr><td>an Integer</td></tr>
<tr><td>check</td><td>parse int</td><td>3</td><td class="pass">3</td></tr>
<tr><td>check</td><td>double value</td><td class="pass">
23.0</td></tr>
</table>-!|

 * appends() returns a String, which is not auto-wrapped, and so plus() is applied to the original ''!-DoFixture-!''
 * anotherObject() returns a fixture, which is itself not auto-wrapped. So plus() is not found, as it's a method of that new fixture, whereas accessOther() is
